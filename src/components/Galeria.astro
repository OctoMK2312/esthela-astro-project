---
const fotos = [
  "imagen-1.jpeg",
  "imagen-2.jpeg",
  "imagen-3.jpeg",
  "imagen-4.jpeg",
  "imagen-5.jpeg",
  "imagen-6.jpeg",
  "imagen-7.jpeg",
  "imagen-8.jpeg",
  "imagen-9.jpeg",
  "imagen-10.jpeg",
  "imagen-11.jpeg",
  "imagen-12.jpeg",
];
---

<section id="galeria-section" class="container animate-on-scroll">
  <h2>Nuestros Momentos</h2>
  <br />
  <p class="subtitulo">Una colección de nuestros recuerdos favoritos.</p>
  <div class="galeria">
    {
      fotos.map((foto, index) => (
        <div class="foto-container">
          <img
            class="foto-galeria"
            src={`/photos/${foto}`}
            alt={`Recuerdo especial número ${index + 1}`}
            loading="lazy"
            data-index={index}
          />
        </div>
      ))
    }
  </div>
</section>

<div
  id="galeria-modal"
  class="modal-overlay"
  style="display: none;"
  role="dialog"
  aria-modal="true"
  aria-labelledby="modal-titulo"
>
  <div class="modal-content-galeria">
    <button id="modal-close" class="modal-control" aria-label="Cerrar modal"
      >&times;</button
    >
    <button
      id="modal-prev"
      class="modal-control prev"
      aria-label="Foto anterior">&#10094;</button
    >
    <button
      id="modal-next"
      class="modal-control next"
      aria-label="Siguiente foto">&#10095;</button
    >
    <img id="modal-imagen" src="" alt="Recuerdo en grande" />
    <div id="modal-titulo" class="visually-hidden">Galería de imágenes</div>
  </div>
</div>

<style>
  .galeria {
    display: grid;
    /* Usamos auto-fill para evitar que una sola imagen se estire demasiado */
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    gap: 1.5rem; /* Un poco más de espacio */
    margin-top: 2rem;
  }

  .subtitulo {
    color: var(--color-texto);
    opacity: 0.7;
    margin-top: -1rem;
    margin-bottom: 2rem;
  }

  .foto-container {
    overflow: hidden;
    border-radius: 12px;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
    transition: box-shadow 0.3s ease;
  }

  .foto-container:hover {
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
  }

  .foto-galeria {
    width: 100%;
    height: 100%;
    object-fit: cover; /* Asegura que la imagen llene el contenedor sin deformarse */
    display: block;
    transition: transform 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94);
    cursor: pointer;
  }

  .foto-galeria:hover {
    transform: scale(1.1);
  }

  /* --- Estilos del Modal --- */

  /* El overlay que ocupa toda la pantalla y centra el contenido */
  .modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.7); /* Un poco más oscuro */
    display: flex;
    justify-content: center; /* Centra horizontalmente */
    align-items: center; /* Centra verticalmente */
    z-index: 1000;
    padding: 1rem;
    box-sizing: border-box; /* Asegura que el padding no afecte el tamaño total */
  }

  /* El contenedor del contenido del modal (el marco) */
  .modal-content-galeria {
    position: relative;
    width: 90vw;
    height: 85vh;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  /* La imagen dentro del modal */
  #modal-imagen {
    max-width: 100%;
    max-height: 100%;
    border-radius: 8px;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
  }

  /* Los botones de control (Siguiente, Anterior, Cerrar) */
  .modal-control {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    background-color: rgba(0, 0, 0, 0.4);
    color: white;
    border: none;
    font-size: 2rem;
    cursor: pointer;
    border-radius: 50%;
    width: 50px;
    height: 50px;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: background-color 0.2s;
    z-index: 1010;
  }

  .modal-control:hover {
    background-color: rgba(0, 0, 0, 0.7);
  }

  /* Posiciones específicas para cada botón */
  #modal-close {
    top: 15px;
    right: 15px;
    transform: none;
    width: 40px;
    height: 40px;
    font-size: 1.5rem;
  }

  .prev {
    left: 25px;
  }
  .next {
    right: 25px;
  }

  /* Para ocultar texto a lectores de pantalla sin usar display:none */
  .visually-hidden {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    border: 0;
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const fotos = document.querySelectorAll(".foto-galeria");
    const modal = document.getElementById("galeria-modal");
    const modalImg = document.getElementById("modal-imagen");
    const closeBtn = document.getElementById("modal-close");
    const prevBtn = document.getElementById("modal-prev");
    const nextBtn = document.getElementById("modal-next");
    const body = document.body;

    let currentIndex = 0;
    // Guardamos los elementos enfocables del modal para la accesibilidad
    const focusableElements =
      'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])';
    let firstFocusableElement: HTMLElement | null;
    let lastFocusableElement: HTMLElement | null;

    function updateModalImage(index: number) {
      const foto = fotos[index];
      if (foto && modalImg) {
        modalImg.src =
          foto && foto.tagName === "IMG" ? (foto as HTMLImageElement).src : "";
        currentIndex = index;
      }
    }

    function openModal(index: number) {
      if (!modal) return;
      updateModalImage(index);
      modal.style.display = "flex";
      body.classList.add("modal-open");

      // Accesibilidad: Guardar y enfocar elementos del modal
      const focusableContent = modal.querySelectorAll(focusableElements);
      firstFocusableElement = focusableContent[0] as HTMLElement;
      lastFocusableElement = focusableContent[
        focusableContent.length - 1
      ] as HTMLElement;
      if (closeBtn) closeBtn.focus(); // Enfocar el botón de cerrar al abrir
    }

    function closeModal() {
      if (!modal) return;
      modal.style.display = "none";
      body.classList.remove("modal-open");
    }

    fotos.forEach((foto) => {
      foto.addEventListener("click", () => {
        const index = parseInt((foto as HTMLElement).dataset.index || "0", 10);
        openModal(index);
      });
    });

    closeBtn?.addEventListener("click", closeModal);

    prevBtn?.addEventListener("click", () => {
      const newIndex = (currentIndex - 1 + fotos.length) % fotos.length;
      updateModalImage(newIndex);
    });

    nextBtn?.addEventListener("click", () => {
      const newIndex = (currentIndex + 1) % fotos.length;
      updateModalImage(newIndex);
    });

    // Cierra el modal al hacer clic fuera de la imagen
    modal?.addEventListener("click", (e) => {
      if (e.target === modal) {
        closeModal();
      }
    });

    // Navegación con teclado
    document.addEventListener("keydown", (e) => {
      if (!modal || modal.style.display !== "flex") return;

      if (e.key === "Escape") {
        closeModal();
      }
      if (e.key === "ArrowLeft") {
        prevBtn?.click();
      }
      if (e.key === "ArrowRight") {
        nextBtn?.click();
      }
      // Accesibilidad: Atrapar el foco dentro del modal
      if (e.key === "Tab") {
        if (e.shiftKey) {
          // Shift + Tab
          if (document.activeElement === firstFocusableElement) {
            if (lastFocusableElement) {
              lastFocusableElement.focus();
              e.preventDefault();
            }
          }
        } else {
          // Tab
          if (document.activeElement === lastFocusableElement) {
            if (firstFocusableElement) {
              firstFocusableElement.focus();
              e.preventDefault();
            }
          }
        }
      }
    });
  });
</script>
